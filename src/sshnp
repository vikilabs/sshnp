#!/bin/bash

#		Author	: Viki (a) Vignesh Natarajan 
#		Contact	: vikilabs.org
#		Licence : MIT

ARG0="$0"
ARG1="$1"
ARG2="$2"
ARG3="$3"
ARG4="$4"
CMD="$ARG0"

SERVER_DETAILS=""
UNAME=""
SERVER_IP=""
SERVER_PORT=""
SSH_KEY_PATH="$HOME/.ssh"

SSH_KEY_PUBLIC=""
SSH_KEY_PRIVATE=""

DEBUG_LEVEL="error"  # "quite", "debug", "error"

replace_dots_with_dash () {
    RET=`echo "$1" | sed -r 's/[.]+/_/g' 2> /dev/null`
    if [ $? -ne 0 ]; then
        #MAC accepts only -E option in sed
        RET=`echo "$1" | sed -E 's/[.]+/_/g' 2> /dev/null`
        if [ $? -ne 0 ]; then
            echo "[ error ] sed command failure @ replace_dots_with_dash()"
            exit 1
        fi
    fi
    echo $RET
}

#arg1 = debug level [ debug / error ]
#arg2 = command to execute in string format
#arg3 = ( optional ) message to display on error
ExecCmd () {

    #debug level
    if [ -z "$1" ]; then
        if [ "$1" != "quite" ]; then
            echo "[    error   ] -> \""arg 1 is missing"\""
        fi
    fi

    #command
    if [ -z "$2" ]; then
        if [ "$1" != "quite" ]; then
            echo "[    error   ] -> \""arg 2 is missing"\""
        fi
    fi

    eval $2

    if [ $? -ne 0 ]; then
        if [ "$1" != "quite" ]; then
            echo "[ exec_error   ] -> \""$2"\""
            echo
        fi
        #if argument 2 exist
        if [ ! -z "$3" ]; then
            if [ "$1" != "quite" ]; then
                echo $3
                echo
            fi
        fi
    else
        #command execution success
        if [ "$1" = "debug" ]; then
            echo "[ exec_success   ] -> \""$2"\""
        fi
    fi
}


#arg1 = debug level [ debug / error ]
#arg2 = command to execute in string format
#arg3 = ( optional ) message to display on error
ExecAndExitOnError () {

    #debug level
    if [ -z "$1" ]; then
        if [ "$1" != "quite" ]; then
            echo "[    error   ] -> \""arg 1 is missing"\""
        fi
        exit 1
    fi

    #command
    if [ -z "$2" ]; then
        if [ "$1" != "quite" ]; then
            echo "[    error   ] -> \""arg 2 is missing"\""
        fi
        exit 1
    fi


    eval $2

    if [ $? -ne 0 ]; then
        if [ "$1" != "quite" ]; then
            echo "[ exec_error   ] -> \""$2"\""
            echo
        fi

        #if argument 2 exist
        if [ ! -z "$3" ]; then
            if [ "$1" != "quite" ]; then
                echo $3
                echo
            fi
        fi
        exit 1
    else
        #command execution success
        if [ "$1" = "debug" ]; then
            echo "[ exec_success   ] -> \""$2"\""
        fi
    fi
}

#Inputs Validation
validate_server_details() {
    ret=`echo $1 |  grep "@"`

    if [ -z "$ret" ]; then
        echo "[ input error ] username or server ip missing"
        exit 1
    fi
}

#Inputs Validation
validate_server_details_at_arg1() {
    ret=`echo $1 |  grep "@"`

    if [ -z "$ret" ]; then
        usage
        exit 1
    fi
}



parse_server_details() {
    [ -z $SERVER_DETAILS ] && { echo "  error: ( ${LINENO} )"; exit 1; }

    validate_server_details $SERVER_DETAILS

    [ -z $SERVER_DETAILS ] && { echo "  error: ( ${LINENO} )"; exit 1; }

    UNAME=`echo $SERVER_DETAILS  | awk -F@ '{print $1}'`
    TEMP_STR=`echo $SERVER_DETAILS  | awk -F@ '{print $2}'`
    SERVER_IP=`echo $TEMP_STR  | awk -F: '{print $1}'`
    SERVER_PORT=`echo $TEMP_STR  | awk -F: '{print $2}'`

    if [[ -z $SERVER_PORT ]]; then
        SERVER_PORT="22"
    fi

    [ -z $UNAME ] && { echo "  error: ( ${LINENO} )"; exit 1; }
    [ -z $SERVER_IP ] && { echo "  error: ( ${LINENO} )"; exit 1; }
    [ -z $SERVER_PORT ] && { echo "  error: ( ${LINENO} )"; exit 1; }
    [ -z $SERVER_DETAILS ] && { echo "  error: ( ${LINENO} )"; exit 1; }
}

print_connection_details() {
    echo "  Remote Host Details :"
    echo
    echo "    User Name         : " $UNAME
    echo "    Server IP         : " $SERVER_IP
    echo "    Server SSH Port   : " $SERVER_PORT
    echo "    SSH Key Public    : " $SSH_KEY_PUBLIC
    echo "    SSH Key Private   : " $SSH_KEY_PRIVATE
}


#prerequisite check
prerequisite_check(){
    ExecAndExitOnError $DEBUG_LEVEL "which ssh-keygen &> /dev/null"  "Install package ( ssh-keygen ) before using this utility"
    ExecAndExitOnError $DEBUG_LEVEL "which ssh &> /dev/null"         "Install package ( ssh ) before using this utility"
    ExecAndExitOnError $DEBUG_LEVEL "which scp &> /dev/null"         "Install package ( scp ) before using this utility"
}

local_delete_old_keys() {
    echo "  [ status ] deleting old key ( $SSH_KEY_PATH/$SSH_KEY_PUBLIC )"
    echo "  [ status ] deleting old key ( $SSH_KEY_PATH/$SSH_KEY_PRIVATE )"
    #Need to just check if file exist or create seperate keys for new servers
    ExecCmd "quite" "rm -rf $SSH_KEY_PATH/$SSH_KEY_PUBLIC"
    ExecCmd "quite" "rm -rf $SSH_KEY_PATH/$SSH_KEY_PRIVATE"
}

generate_rsa_keys() {
    echo "  [ status ] generating rsa key ( $SSH_KEY_PATH/$SSH_KEY_PRIVATE )"

    ExecAndExitOnError "error" "ssh-keygen -q -N '' -t rsa -b 1024 -f $SSH_KEY_PATH/$SSH_KEY_PRIVATE &> /dev/null"
}


remote_upload_public_key(){
    echo "  [ status ] uploading key to remote host ( $SSH_KEY_PATH/$SSH_KEY_PUBLIC )"
    echo
    echo
    ExecAndExitOnError "error" "ssh-copy-id -p $SERVER_PORT -i $SSH_KEY_PATH/$SSH_KEY_PUBLIC $UNAME@$SERVER_IP  &> /dev/null" "ssh public key upload"
}

remote_delete_public_key(){
    REMOVE_COMMAND="rm ~/.ssh/$SSH_KEY_PUBLIC 2> /dev/null;"
    ssh $UNAME@$SERVER_IP -p $SERVER_PORT -t "$REMOVE_COMMAND"
}

usage() {
    echo
    echo "  <------------------  Usage Instruction --------------------->"
    echo
    echo "  Connect / Enable passwordless ssh"
    echo
    echo "    "$CMD " <username>@<domain/ip_address>""                -> [ connect to server without password ]"
    echo "    "$CMD " <username>@<domain/ip_address>:<port>""         -> [ connect to server without password ]"
    echo
    echo "  Disable passwordless ssh"
    echo
    echo "    "$CMD " -d <username>@<domain/ip_address>""        -> [ disable password less ssh]"
    echo "    "$CMD " -d <username>@<domain/ip_address>:<port>"" -> [ disable password less ssh]"
    echo
    echo
}

disable_ssh_nopass(){
    #remote_delete_public_key
    local_delete_old_keys
    echo "  [ status ] passwordless ssh is disabled"
}

enable_ssh_nopass(){
    validate_server_details_at_arg1 $SERVER_DETAILS
    disable_ssh_nopass
    generate_rsa_keys
    remote_upload_public_key
    echo "  [ status ] passwordless ssh is enabled"
}

ssh_nopass_connect() {
    #print_connection_details

    ssh $UNAME@$SERVER_IP -p $SERVER_PORT -i $SSH_KEY_PATH/$SSH_KEY_PRIVATE -o PasswordAuthentication=no 2> /dev/null

    if [ $? -ne 0 ]; then
        echo
    	echo "  [ error ] sshnp is not enabled for this remote server ( $SERVER_DETAILS )"
        echo
        echo "  [ help  ] Try running the following command to enable sshnp"
        echo
        echo "       $CMD -e $SERVER_DETAILS"
        echo
	exit 1
    fi
}

get_server_details() {
    if [ "$ARG1" = "-d" ]; then
        SERVER_DETAILS="$ARG2"
    elif [ "$ARG1" = "-e" ]; then
        SERVER_DETAILS="$ARG2"
    else
        SERVER_DETAILS="$ARG1"
    fi
}

generate_key_labels(){

    [ -z $SERVER_IP ] && { echo "  error:  server ip missing ( ${LINENO} )"; exit 1; }

    IP_LABEL="$(replace_dots_with_dash $SERVER_IP)"

    [ -z $IP_LABEL ] && { echo "  error: IP_LABEL generation ( ${LINENO} )"; exit 1; }

    SSH_KEY_LABEL=$UNAME"_"$IP_LABEL"_"$SERVER_PORT

    SSH_KEY_PUBLIC="$SSH_KEY_LABEL.pub"
    SSH_KEY_PRIVATE="$SSH_KEY_LABEL"

    [ -z $SSH_KEY_PUBLIC ] && { echo "  error: ( ${LINENO} )"; exit 1; }
    [ -z $SSH_KEY_PRIVATE ] && { echo "  error: ( ${LINENO} )"; exit 1; }
}

main_logic() {
    if [ "$ARG1" = "-d" ]; then
        echo "  [ status ] disable password less ssh"
        disable_ssh_nopass
    elif [ "$ARG1" = "-e" ]; then
        echo "  [ status ] enable password less ssh"
	enable_ssh_nopass
    else
        ssh_nopass_connect
    fi
}

usage_check(){
    if [ -z $ARG1 ]; then
	echo
        echo "  [ error ] usage "
	usage
	exit 1
    fi
}


usage_check
prerequisite_check
get_server_details
parse_server_details
generate_key_labels
main_logic

